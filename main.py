from aiogram import types
import time

from Enum_classes import Flags
from Users import User
from config import *
import keyboards
import texts
import functions


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user:
        user = User(key=user_id)
        users.add(user)
        user = users.get(user_id)
        user.username = message.from_user.username
    # print(texts.start_text.format(username=user.username))
    await bot.send_message(chat_id=user_id,
                           text=texts.start_text.format(username=user.username),
                           reply_markup=functions.create_keyboard(name_buttons=keyboards.name_buttons_by_start,
                                                                  ),
                           disable_web_page_preview=False,
                           parse_mode="Markdown")
    users.update_info(user)


@dp.message_handler(lambda message: message.from_user.id not in users, content_types=types.ContentTypes.TEXT)
async def start(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    if not user:
        users.add(user_id)
        user = users.get(user_id)
        user.username = message.from_user.username
    users.update_info(user)


@dp.message_handler(lambda message: users.get(message.from_user.id).flag.name == "Payment",
                    content_types=types.ContentTypes.TEXT)
async def check_payment(message: types.Message):
    user_id = message.from_id
    user = users.get(user_id)
    user_code = message.text
    if user_code == code_for_payment:
        await bot.send_message(chat_id=user_id,
                               text=texts.text_after_pay,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"]
                               ),
                               parse_mode="Markdown"
                               )
        user.payment = True
        user.flag = Flags.NONE
        users.update_info(user)

    else:
        await bot.send_message(chat_id=user_id,
                               text=texts.not_successful_payment,
                               parse_mode="Markdown"
                               )


@dp.message_handler(lambda message: message.from_user.id in users, content_types=types.ContentTypes.TEXT)
async def main_hand(message: types.Message):
    user_id = message.from_user.id
    user = users.get(user_id)
    text = message.text
    if "–Ω–∏–∫–∫–∏," in text.lower():
        await message.reply("–ú–∏–Ω—É—Ç—É, —Å–µ–π—á–∞—Å —è –æ—Ç–≤–µ—á—É")
        response = await OpenAI.question(text=introductory_part + text)
        await bot.send_message(chat_id=user_id,
                               text=response,
                               parse_mode="Markdown",
                               # reply_markup=functions.create_keyboard(["–°–ø–∞—Å–∏–±–æ, –ù–∏–∫–∫–∏!"])

                               )

    # elif text == "–°–ø–∞—Å–∏–±–æ, –ù–∏–∫–∫–∏!":

    elif text == "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫—É—Ä—Å–∞":
        await bot.send_message(chat_id=user_id,
                               text=texts.structure_course,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=keyboards.name_buttons_by_start[1::]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–°—é–∂–µ—Ç –∫—É—Ä—Å–∞":
        await bot.send_message(chat_id=user_id,
                               text=texts.plot_course,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=keyboards.name_buttons_by_start[0::2]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–•–æ—á—É –Ω–∞—á–∞—Ç—å":
        await bot.send_message(chat_id=user_id,
                               text=texts.text_for_payment,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=[]
                               ),
                               parse_mode="Markdown"
                               )
        user.flag = Flags.Payment
        user.time_transition_payment = time.mktime(message.date.timetuple())

    elif text == "–ù–∞—á–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        await bot.send_message(chat_id=user_id,
                               text=texts.start_history_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–Ø —Å—Ç—Ä–∞—à–Ω–æ –∑–∞–Ω—è—Ç", "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫—Ç–æ —ç—Ç–æ"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–Ø —Å—Ç—Ä–∞—à–Ω–æ –∑–∞–Ω—è—Ç":
        await bot.send_message(chat_id=user_id,
                               text=texts.text_scary,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–î–∞ –∏–¥—É —è, –ª–∞–¥–Ω–æ"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫—Ç–æ —ç—Ç–æ":
        await bot.send_message(chat_id=user_id,
                               text=texts.wonder_who_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ò–¥—Ç–∏ –≤ —Ö–æ–ª–ª"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ò–¥—Ç–∏ –≤ —Ö–æ–ª–ª" or text == "–î–∞ –∏–¥—É —è, –ª–∞–¥–Ω–æ":
        await bot.send_message(chat_id=user_id,
                               text=texts.text_1,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–°–ª–∏—Ç—å—Å—è —Å –ª–∞–Ω–¥—à–∞—Ñ—Ç–æ–º –∏ –≤—ã–∂–∏–¥–∞—Ç—å", "–ó–∞–≥–æ–≤–æ—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–º"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–°–ª–∏—Ç—å—Å—è —Å –ª–∞–Ω–¥—à–∞—Ñ—Ç–æ–º –∏ –≤—ã–∂–∏–¥–∞—Ç—å":
        await bot.send_message(chat_id=user_id,
                               text=texts.landscape_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ó–∞–≥–æ–≤–æ—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–º"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ó–∞–≥–æ–≤–æ—Ä–∏—Ç—å –ø–µ—Ä–≤—ã–º":
        await bot.send_message(chat_id=user_id,
                               text=texts.speak_first_text.format(username=user.username),
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ö—Ç–æ —Ç—ã?", "–í—ã –º–µ–Ω—è —Å –∫–µ–º-—Ç–æ –ø—É—Ç–∞–µ—Ç–µ"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ö—Ç–æ —Ç—ã?" or text == "–í—ã –º–µ–Ω—è —Å –∫–µ–º-—Ç–æ –ø—É—Ç–∞–µ—Ç–µ":
        await bot.send_message(chat_id=user_id,
                               text=texts.who_you_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ß—Ç–æ –∑–∞ —Å—é—Ä–ø—Ä–∏–∑?", "–ß—Ç–æ –≤–∞–º –æ—Ç –º–µ–Ω—è –Ω–∞–¥–æ?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ß—Ç–æ –∑–∞ —Å—é—Ä–ø—Ä–∏–∑?":
        await bot.send_message(chat_id=user_id,
                               text=texts.surprise_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ß—Ç–æ –≤–∞–º –æ—Ç –º–µ–Ω—è –Ω–∞–¥–æ?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ß—Ç–æ –≤–∞–º –æ—Ç –º–µ–Ω—è –Ω–∞–¥–æ?":
        await bot.send_message(chat_id=user_id,
                               text=texts.you_want_me_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–Ø –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞—éü§®"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–Ø –≤—Å–µ –µ—â–µ –Ω–µ –ø–æ–Ω–∏–º–∞—éü§®":
        await bot.send_message(chat_id=user_id,
                               text=texts.dont_understand,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ß—Ç–æ –∂–µ –∑–∞ —Ç—ã–∫–≤—ã —Ç–∞–∫–∏–µ?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ß—Ç–æ –∂–µ –∑–∞ —Ç—ã–∫–≤—ã —Ç–∞–∫–∏–µ?":
        await bot.send_message(chat_id=user_id,
                               text=texts.pumpkins_these,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ù–æ —ç—Ç–æ –∂–µ –æ–±—ã—á–Ω–∞—è —Ç—ã–∫–≤–∞!"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ù–æ —ç—Ç–æ –∂–µ –æ–±—ã—á–Ω–∞—è —Ç—ã–∫–≤–∞!":
        await bot.send_message(chat_id=user_id,
                               text=texts.ordinary_pumpkin_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ö–∞–∫ –º–Ω–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ö–∞–∫ –º–Ω–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?":
        await bot.send_message(chat_id=user_id,
                               text=texts.how_do_this_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–Ø –≥–æ—Ç–æ–≤(–∞)!", "–ê –≥–¥–µ –∂–µ –º–∞—à–∏–Ω–∞?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ê –≥–¥–µ –∂–µ –º–∞—à–∏–Ω–∞?":
        await bot.send_message(chat_id=user_id,
                               text=texts.car_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–Ø –≥–æ—Ç–æ–≤(–∞)!"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–Ø –≥–æ—Ç–æ–≤(–∞)!":
        await bot.send_message(chat_id=user_id,
                               text=texts.chapter_1,
                               parse_mode="Markdown"
                               )
        await bot.send_message(chat_id=user_id,
                               text=texts.i_ready_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–•–æ—Ä–æ—à–æ, —è –≥–æ—Ç–æ–≤(–∞)"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–•–æ—Ä–æ—à–æ, —è –≥–æ—Ç–æ–≤(–∞)":
        await bot.send_message(chat_id=user_id,
                               text=texts.good_i_ready_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω?":
        await bot.send_message(chat_id=user_id,
                               text=texts.graphic_design_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ê —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –Ω–∞—à–µ–π —Ü–µ–ª–∏. –ò–¥–µ–º –¥–∞–ª—å—à–µ!"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ê —ç—Ç–æ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –Ω–∞—à–µ–π —Ü–µ–ª–∏. –ò–¥–µ–º –¥–∞–ª—å—à–µ!":
        await bot.send_message(chat_id=user_id,
                               text=texts.our_goal_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–î–∏–¥–∂–∏—Ç–∞–ª –¥–∏–∑–∞–π–Ω ‚Äì —á—Ç–æ –∑–∞ –∑–≤–µ—Ä—å?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–î–∏–¥–∂–∏—Ç–∞–ª –¥–∏–∑–∞–π–Ω ‚Äì —á—Ç–æ –∑–∞ –∑–≤–µ—Ä—å?":
        await bot.send_photo(chat_id=user_id,
                             photo=texts.link_photo_1)
        await bot.send_message(chat_id=user_id,
                               text=texts.digital_design_text,
                               parse_mode="Markdown"
                               )
        await bot.send_message(chat_id=user_id,
                               text=texts.digital_design_2_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ö–æ–º—É –≤—Å–µ —ç—Ç–æ –Ω—É–∂–Ω–æ?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ö–æ–º—É –≤—Å–µ —ç—Ç–æ –Ω—É–∂–Ω–æ?":
        await bot.send_message(chat_id=user_id,
                               text=texts.who_needs_all_this_text,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=[]
                               ),
                               parse_mode="Markdown"
                               )

        await bot.send_message(chat_id=user_id,
                               text=texts.text_2,
                               reply_markup=functions.create_keyboard(
                                   name_buttons=["–ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –æ–±–ª–∞–¥–∞–µ—Ç –¥–∏–¥–∂–∏—Ç–∞–ª –¥–∏–∑–∞–π–Ω–µ—Ä?"]
                               ),
                               parse_mode="Markdown"
                               )

    elif text == "–ö–∞–∫–∏–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏ –æ–±–ª–∞–¥–∞–µ—Ç –¥–∏–¥–∂–∏—Ç–∞–ª –¥–∏–∑–∞–π–Ω–µ—Ä?":
        await bot.send_message(chat_id=user_id,
                               text="texts.",
                               reply_markup=functions.create_keyboard(
                                   name_buttons=[]
                               ),
                               parse_mode="Markdown"
                               )

    # elif text == "":
    #     await bot.send_message(chat_id=user_id,
    #                            text=texts.,
    #                            reply_markup=functions.create_keyboard(
    #                                name_buttons=[]
    #                            ),
    #                            parse_mode="Markdown"
    #                            )
    #
    # elif text == "":
    #     await bot.send_message(chat_id=user_id,
    #                            text=texts.,
    #                            reply_markup=functions.create_keyboard(
    #                                name_buttons=[]
    #                            ),
    #                            parse_mode="Markdown"
    #                            )
    #
    # elif text == "":
    #     await bot.send_message(chat_id=user_id,
    #                            text=texts.,
    #                            reply_markup=functions.create_keyboard(
    #                                name_buttons=[]
    #                            ),
    #                            parse_mode="Markdown"
    #                            )
    #
    # elif text == "":
    #     pass
    users.update_info(user)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=False)
